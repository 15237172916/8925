#ifndef  _QUEUE_H_
#define  _QUEUE_H_



#if 0
#if 1
typedef struct queue
{
	int *buff;
	int putIndex;
	int getIndex;
	int count;
	int maxSize;
}Queue,*pQueue;

#else
#include "doulist.h"
typedef struct queue
{
	Pnode head;
	int maxSize;
	int count;
}Queue;
 
#endif
Queue *createQueue(int maxSize);
int destroyQueue(Queue *pQueue);
 
int enQueue(Queue *pQueue, int data);
int deQueue(Queue *pQueue, int *pdata);
 
int count(Queue *pQueue);
int maxSize(Queue *pQueue);
int isEmpty(Queue *pQueue);
int isFull(Queue *pQueue);
 
#endif



typedef char *Elementype;        //    定义数据类型
//    定义节点结构
typedef struct Node {
    Elementype Element;        //    数据域
    struct Node * Next;
}NODE, *PNODE;

//    定义队列结构体
typedef struct QNode {
    PNODE Front, Rear;        //    队列头，尾指针
} Queue, *PQueue;



//    声明函数体
void InitQueue(PQueue);    //    创建队列函数
bool IsEmptyQueue(PQueue);    //    判断队列是否为空函数
void InsertQueue(PQueue, int val);    //    入队函数
void DeleteQueue(PQueue,int * val);    //    出队函数
void DestroyQueue(PQueue);    //    摧毁队列函数
void TraverseQueue(PQueue);    //    遍历队列函数
void ClearQueue(PQueue);    //    清空队列函数
int LengthQueue(PQueue);    //    求队列长度函数



#endif
