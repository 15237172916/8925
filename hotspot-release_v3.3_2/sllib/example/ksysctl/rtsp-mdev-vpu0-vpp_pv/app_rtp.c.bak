#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <sl_types.h>

#include "app_rtp.h"

FILE *wacfp = NULL;
static FILE * outfile  = NULL;

int numwritten;
int filesize = 0;

static unsigned char uNowPayloadType;
//static DATAHEAD *pDataHead = NULL; //(DATAHEAD *)buf;
extern void audio_play(unsigned char * src, unsigned frameSize);
extern int audio_config(SL_U32 fs, SL_U32 audio_bits, SL_U32 chns);
char outfilename[128] = "./test2.wav";

int process_start_frame( unsigned char *buf, unsigned int len, unsigned int *piCpySize, unsigned int *piFrameLeftLen)
{
    DATAHEAD *pDataHead = (DATAHEAD *)buf;
    unsigned int DataFrameLen, iPacketLeftLen,size;
    
    if(pDataHead->iProbe != 0x1A1B1C1D)
    {
        return -1;
    }

    //printf("Find probe \n");
    //printf("Find len = %d \n",pDataHead->iLen);
    
    
		DataFrameLen = pDataHead->iLen;
		iPacketLeftLen = len;
    
		while(DataFrameLen < iPacketLeftLen-sizeof(DATAHEAD)) //multiframe in one packet
		{
			//copy the frame
			//printf("copy process 11, len = %d \n",DataFrameLen);
			memcpy(pFrame,buf+sizeof(DATAHEAD),DataFrameLen);
			
			//process the frame
			size = DataFrameLen;
			//printf("process the frame frame len = %d \n", DataFrameLen);
			if (H264 == uNowPayloadType)
			{
				printf("wac process 1, size = %d \n",size);
				printf("\n----------------H264 1-------------- \n");
				wacPushFrameToMDev(pFrame, size); //
			}
			if (WAV == uNowPayloadType)
			{
				printf("\n***************WAV 1*****************\n");
				audio_play(pFrame, size);
				//fwrite(pFrame, size, 1, outfile);
			}
			
			//find next head
			iPacketLeftLen = iPacketLeftLen - (DataFrameLen+sizeof(DATAHEAD));
			buf = buf+DataFrameLen+sizeof(DATAHEAD);
			pDataHead = buf;

			if(iPacketLeftLen >= sizeof(DATAHEAD))
			{
				if(0x1A1B1C1D == pDataHead->iProbe)
				{
					uNowPayloadType = pDataHead->uPayloadType;
					DataFrameLen = pDataHead->iLen;
					//printf("PayloadType : %d \n", pDataHead->uPayloadType);
					//printf("iProbe = %0x \n",pDataHead->iProbe);
					//printf("iTimeStamp : %d \n", pDataHead->iTimeStamp);
					//printf("uSeq : %d \n", pDataHead->uSeq);
					//printf("Find probe \n");
					//printf("Payload Type : %d \n", pDataHead->uPayloadType);
					printf("Find len = %d \n",pDataHead->iLen);
				}
				else
				{
					printf("Packet wrong, searching again \n");
					//uFrameErrorFlag = 1;
					return -1;
				}
			}
			else //data head split in two packet
			{
				printf("/////////////////////////////error 2 //////////////////////////////");
				printf(" Data Head in two packet, will do it in future \n");
				//uFrameErrorFlag = 1;
				return -1;
			}
		}
		
		//process last part of packet
		if(DataFrameLen > (iPacketLeftLen-sizeof(DATAHEAD))) // not finished
		{
			//copy frame data to pFrame;
			//printf("copy frame data to pFrame, len = %d \n", iPacketLeftLen-sizeof(DATAHEAD));
			//copy the frame
			//printf("copy process 13, len = %d \n",iPacketLeftLen-sizeof(DATAHEAD));	                    
			memcpy(pFrame,buf+sizeof(DATAHEAD),iPacketLeftLen-sizeof(DATAHEAD));

			*piCpySize = iPacketLeftLen-sizeof(DATAHEAD);
			*piFrameLeftLen = DataFrameLen-(iPacketLeftLen-sizeof(DATAHEAD));
			//eNextPacketType = CONTINUE_PACKET;
			return 1;
			
		}
		else if( DataFrameLen == (iPacketLeftLen-sizeof(DATAHEAD))) //finished
		{
			eNextPacketType = START_PACKET;
			//copy the frame
			//printf("copy process 14, len = %d \n",DataFrameLen);
			memcpy(pFrame,buf+sizeof(DATAHEAD),DataFrameLen);
			//process the frame
			size = DataFrameLen;
			//printf("process the frame frame len = %d \n", DataFrameLen);
			if (H264 == uNowPayloadType)
			{
				printf("wac process 2, size = %d \n",size);
				printf("\n----------------H264 2-------------- \n");
				wacPushFrameToMDev(pFrame, size);
			}
			if (WAV == uNowPayloadType)
			{
				printf("\n***************WAV 2*****************\n");
				audio_play(pFrame, size);
				//fwrite(pFrame, size, 1, outfile);
				
			}
			
			return 0;
		}
}

#if 1
//void main(void)
void *app_rtp_main(void)
{
    /*
       wacfp = fopen("./test.ts","w+b");
        if(NULL == wacfp)
        {
            printf("open file error \n");
            return 0;
        }
    */
    
    
    if(!outfile)
	{   
		if ((outfile = fopen(outfilename, "wb")) == NULL) {
			printf("can't open %s",outfilename);
			return;
		}   
	}   
    
    
    // set socket's address information
    struct sockaddr_in   server_addr;
    bzero(&server_addr, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htons(INADDR_ANY);
    server_addr.sin_port = htons(MYPORT);

    struct timeval tv1,tv2, timeout = {2,0};
    struct timezone tz;
    
	//unsigned char buf[9];

    int iDataNum = 0;

    int sock_cli;

    struct sockaddr_in servaddr;
    memset(&servaddr, 0, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(8001);
	servaddr.sin_addr.s_addr = inet_addr("192.168.1.3");

    //servaddr.sin_addr.s_addr = inet_addr("192.168.100.103");
ReSocket:
    //sleep(6);     
    sock_cli = socket(AF_INET,SOCK_STREAM, 0);
    if (sock_cli < 0)
    {
		perror("socket");
		sleep(1);
		goto ReSocket;
	}
ReConnect:
	//printf("-------------------- Data Channel Connection start----------------------\n");
    
    if (connect(sock_cli, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0)
    {
        printf("8001 data channel connect error \n");
        perror("connect");
        sleep(1);
        goto ReConnect;
    }
    else
    {
        printf("8001 data channel Connected \n");
    }
    
	setsockopt(sock_cli,SOL_SOCKET,SO_SNDTIMEO,&timeout,sizeof(timeout));
	setsockopt(sock_cli,SOL_SOCKET,SO_RCVTIMEO,&timeout,sizeof(timeout));

	unsigned char *buf = (unsigned char*)malloc(sizeof(unsigned char)*BUFFER_SIZE);
	//buf = (unsigned char*)malloc(sizeof(unsigned char)*BUFFER_SIZE);
	struct sockaddr_in client_addr;
	socklen_t          length = sizeof(client_addr);

    long lDataRateSum=0;
    int iDataRate;
    int iTestTimes=0;
    
    struct PACKET_STRU
    {
        enum PACKETTYPE ePacketType;
        unsigned char uFrameNum;
        struct
        {
            unsigned int uiStartPos;
            unsigned int uiLen;
        } framePos[10]; //maxim 10 frame in one packet
    } curPacketStru, nextPacketStru;

    unsigned int iFrameLenNextPacket;
    
    unsigned int DataFrameLen,DataFrameLeftLen = 0;
    
    unsigned int iPacketLeftLen =0;
    
    unsigned char uFrameErrorFlag = 0;
    
    unsigned int size = 0;
    
    int ret;

    char *s = malloc(100*sizeof(char));
    DATAHEAD *pDataHead = (DATAHEAD *)buf;
	//pDataHead = (DATAHEAD *)buf;
	audio_config(48000, 16, 2);
	
    while(1)
    {
		
        int pos=0;
        int len;
        int bStartRecv=0;
        int i;
        
		//if( SL_TRUE == gbTestMode || SL_TRUE == gbBandwidthDetectMode)
        //{//packet is TCP packet, frame is 264 frame;
		while(1) //continue get packet
		{
            /*
                if (filesize > 3000000)
                {
                    fclose(wacfp);
                    close(sock_cli);
                    free(buf);
                    return 0;
                }
            */

			//recv data
			len = recv(sock_cli, buf, BUFFER_SIZE, 0);
			if (len < 0)
			{
				printf("Server Recieve Data Failed!\n");
				close(sock_cli);
				sleep(1);
				goto ReSocket;
			}
			else if (len > 0)
			{
				printf("recv packet len : %d \n", len);
				
				if (0==bStartRecv)
				{
					//check data header
					if(0x1A1B1C1D == pDataHead->iProbe && len>=sizeof(DATAHEAD)) //ignore the DATAHEAD split frame issue
					{
						uNowPayloadType = pDataHead->uPayloadType;
						iPacketLeftLen = len;
						
						//printf("iProbe = %0x \n",pDataHead->iProbe);
						//printf("iTimeStamp : %d \n", pDataHead->iTimeStamp);
						//printf("uSeq : %d \n", pDataHead->uSeq);
						//printf("Find probe \n");
						//printf("Payload Type : %d \n", pDataHead->uPayloadType);
						printf("Find len = %d \n",pDataHead->iLen);
						
						bStartRecv = 1;
						ePacketType = START_PACKET;
						uFrameErrorFlag = 0;
						
						DataFrameLen = pDataHead->iLen;
						ret = process_start_frame(buf,len,&size,&DataFrameLeftLen);
						if(-1==ret)
						{
							uFrameErrorFlag = 1;
							bStartRecv = 0;
						}
						else if(0 == ret)
						{
							eNextPacketType = START_PACKET;
						}
						else if(1 ==ret);
						{
							eNextPacketType = CONTINUE_PACKET;
						}
						//curPacketStru.ePacketType = START_PACKET;
						//curPacketStru.uFrameNum = 1;
						//curPacketStru.framePos[0].uiStartPos = sizeof(DATAHEAD);
						//curPacketStru.framePos[0].uiLen = pDataHead->iLen;
			 
						/*   Change to Function process_start_frame;
						while(DataFrameLen < iPacketLeftLen-sizeof(DATAHEAD)) //multiframe in one packet
						{
							//copy the frame
							memcpy(pFrame,buf+sizeof(DATAHEAD),DataFrameLen);
							//process the frame
							size = DataFrameLen;
							wacPushFrameToMDev(pFrame, size);
							
							printf("process the frame frame len = %d \n", DataFrameLen);
							//find next head
							iPacketLeftLen -= (DataFrameLen+sizeof(DATAHEAD));
							buf+=DataFrameLen+sizeof(DATAHEAD);
							pDataHead = buf;
							
							if(iPacketLeftLen >= sizeof(DATAHEAD))
							{
								if(0x1A1B1C1D == pDataHead->iProbe)
								{
									printf("Find probe \n");
									printf("Find len = %d \n",pDataHead->iLen);
									DataFrameLen = pDataHead->iLen;
								}
								else
								{
									printf("Packet wrong, searching again \n");
									uFrameErrorFlag = 1;
									break;
								}
							}
							else //data head split in two packet
							{
								printf(" Data Head in two packet, will do it in future \n");
								uFrameErrorFlag = 1;
								break;
							}
						}

						//process last part of packet

						if(DataFrameLen > (iPacketLeftLen-sizeof(DATAHEAD)) && uFrameErrorFlag == 0) // not finished
						{
							//copy frame data to pFrame;
							printf("copy frame data to pFrame, len = %d \n", iPacketLeftLen-sizeof(DATAHEAD));
							//copy the frame
							
							memcpy(pFrame,buf+sizeof(DATAHEAD),iPacketLeftLen-sizeof(DATAHEAD));

							DataFrameLeftLen = DataFrameLen-iPacketLeftLen+sizeof(DATAHEAD);
							size = iPacketLeftLen-sizeof(DATAHEAD);
							
							eNextPacketType = CONTINUE_PACKET;
						}
						else if( DataFrameLen == (iPacketLeftLen-sizeof(DATAHEAD)) && uFrameErrorFlag == 0) //finished
						{
							eNextPacketType = START_PACKET;
							//copy the frame
							memcpy(pFrame,buf+sizeof(DATAHEAD),DataFrameLen);
							//process the frame
							size = DataFrameLen;
							wacPushFrameToMDev(pFrame, size);
							printf("process the frame frame len = %d \n", DataFrameLen);
						}
						*/
					}
				}
				else//not first frame
				{
					iPacketLeftLen = len;
					if(CONTINUE_PACKET == eNextPacketType)
					{
						if(DataFrameLeftLen == iPacketLeftLen)  //finish this frame
						{
							//copy frame data to pFrame
							printf("copy process 1, len = %d \n", DataFrameLeftLen);
							memcpy(pFrame+size, buf, DataFrameLeftLen);
							//process pFrame
							size = size + DataFrameLeftLen;
							if (H264 == uNowPayloadType)
							{
								printf("Wac process 3, size = %d \n",size);
								printf("\n----------------H264 3-------------- \n");
								wacPushFrameToMDev(pFrame,size);
							}
							if (WAV == uNowPayloadType)
							{
								printf("\n***************WAV 3*****************\n");
								audio_play(pFrame, size);
								//fwrite(pFrame, size, 1, outfile);
							}
							eNextPacketType = START_PACKET;
						}
						else if(DataFrameLeftLen > iPacketLeftLen) //still not finish this frame
						{
							//copy frame data to pFrame
							printf("copy process 2, len = %d \n", iPacketLeftLen);
							memcpy(pFrame+size, buf, iPacketLeftLen);
							size += iPacketLeftLen;
							DataFrameLeftLen -= iPacketLeftLen;
							eNextPacketType = CONTINUE_PACKET;
						}
						else if(DataFrameLeftLen <= iPacketLeftLen - sizeof(DATAHEAD))
						{
							//process the frame
							printf("copy process 2, len = %d \n", iPacketLeftLen);
							memcpy(pFrame+size, buf, DataFrameLeftLen);
							size = size + DataFrameLeftLen;
							if (H264 == uNowPayloadType)
							{
								printf("Wac process 4, size = %d \n",size);
								printf("\n----------------H264 4-------------- \n");
								wacPushFrameToMDev(pFrame,size);
							}
							if (WAV == uNowPayloadType)
							{ 
								printf("\n***************WAV 4*****************\n");
								audio_play(pFrame, size);
								//fwrite(pFrame, size, 1, outfile);
							}
							ret = process_start_frame( buf+DataFrameLeftLen, iPacketLeftLen-DataFrameLeftLen,&size,&DataFrameLeftLen);
							if(-1==ret)
							{
								uFrameErrorFlag = 1;
								bStartRecv = 0;
							}
							else if(0 == ret)
							{
								eNextPacketType = START_PACKET;
							}
							else if(1 ==ret);
							{
								eNextPacketType = CONTINUE_PACKET;
							}
							/****change to function process_start_frame;
							while(DataFrameLeftLen < iPacketLeftLen-sizeof(DATAHEAD)) //multiframe in one packet
							{
								//process the frame
								printf("process the continue frame frame len = %d \n", DataFrameLeftLen);
								//copy frame data to pFrame
								memcpy(pFrame+size, buf, DataFrameLeftLen);
								//process pFrame
								size = size + DataFrameLeftLen;
								wacPushFrameToMDev(pFrame,size);
								
								//find next head
								iPacketLeftLen -= DataFrameLeftLen;
								buf+=DataFrameLeftLen;
								pDataHead = buf;
								
								if(iPacketLeftLen >= sizeof(DATAHEAD))
								{			                    
									if(0x1A1B1C1D == pDataHead->iProbe)
									{
										printf("Find probe \n");
										printf("Find len = %d \n",pDataHead->iLen);
										DataFrameLeftLen = pDataHead->iLen;
										buf+=sizeof(DATAHEAD);
										size = 0;
									}
									else
									{
										printf("Packet wrong, searching again \n");
										uFrameErrorFlag = 1;
										break;
									}
								}
								else //data head split in two packet
								{
									printf(" Data Head in two packet, will do it in future \n");
									uFrameErrorFlag = 1;
									break;
								}
							}
							
							//process last part of packet
									   
							if(DataFrameLeftLen > (iPacketLeftLen-sizeof(DATAHEAD)) && uFrameErrorFlag == 0) // not finished
							{
								//copy frame data to pFrame;
								printf("copy frame data to pFrame, len = %d \n", iPacketLeftLen-sizeof(DATAHEAD));
								//copy the frame
								
								memcpy(pFrame,buf,iPacketLeftLen-sizeof(DATAHEAD));
																
								DataFrameLeftLen = DataFrameLeftLen-iPacketLeftLen+sizeof(DATAHEAD);
								size = iPacketLeftLen-sizeof(DATAHEAD);
								
								eNextPacketType = CONTINUE_PACKET;
							}
							else if( DataFrameLeftLen == (iPacketLeftLen-sizeof(DATAHEAD)) && uFrameErrorFlag == 0) //finished
							{
								eNextPacketType = START_PACKET;
								//copy the frame
								memcpy(pFrame,buf+sizeof(DATAHEAD),DataFrameLen);
								//process the frame
								size = DataFrameLen;
								wacPushFrameToMDev(pFrame, size);
								printf("process the frame frame len = %d \n", DataFrameLen);
							}*/
							
						}
						else if (DataFrameLeftLen > iPacketLeftLen - sizeof(DATAHEAD) && DataFrameLeftLen < iPacketLeftLen)
						{
							printf("/////////////////////////////error 1 //////////////////////////////");
							/*
							memcpy(pFrame+size, buf, DataFrameLeftLen); 
							size = size + DataFrameLeftLen; //算出这一帧的大小
							
							if (H264 == uNowPayloadType)  //对这一帧数据进行处理
							{
								wacPushFrameToMDev(pFrame,size);
							}
							if (WAV == uNowPayloadType)
							{
								printf("\n***************WAV 4*****************\n");
								//play_audio(pFrame, size);
								fwrite(pFrame, size, 1, outfile);
							}
							*/
							//split DATAHEAD
							printf(" Data Head in two packet, will do it in future \n");
							uFrameErrorFlag = 1;
							bStartRecv =0;
							//break;
						}
					}
					else if(START_PACKET == eNextPacketType)
					{
						uNowPayloadType = pDataHead->uPayloadType;
						DataFrameLeftLen = pDataHead->iLen;
						
						//printf("iProbe = %0x \n",pDataHead->iProbe);
						//printf("iTimeStamp : %d \n", pDataHead->iTimeStamp);
						//printf("uSeq : %d \n", pDataHead->uSeq);
						//printf("payload type : %d \n", pDataHead->uPayloadType);
						//printf("Find len = %d \n",pDataHead->iLen);
						
						ret = process_start_frame( buf,len,&size,&DataFrameLeftLen);
						
						if(-1==ret)
						{
							uFrameErrorFlag = 1;
							bStartRecv = 0;
						}
						else if(0 == ret)
						{
							eNextPacketType = START_PACKET;
						}
						else if(1 ==ret);
						{
							eNextPacketType = CONTINUE_PACKET;
						}
					}
				}
			}
			else
			{
				printf("Recv data len = 0 \n");
				close(sock_cli);
				goto ReSocket;
			}
            //}
			//usleep(1000); //Detect gbTestMode change to disable every 1ms;
        }
    }        
    close(sock_cli);
	free(buf);

    return 0;
}

#endif

//void main(void)
void maintest(void)
{
    // set socket's address information
    struct sockaddr_in   server_addr;
    bzero(&server_addr, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htons(INADDR_ANY);
    server_addr.sin_port = htons(MYPORT);

    struct timeval tv1,tv2, timeout = {10,0};
    struct timezone tz;

    
//    unsigned char buf[9];
    
    
    int iDataNum = 0;

    int sock_cli;

ReSocket:
    sock_cli = socket(AF_INET,SOCK_STREAM, 0);

    struct sockaddr_in servaddr;
    memset(&servaddr, 0, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(8001);
    servaddr.sin_addr.s_addr = inet_addr("192.168.1.3");

//    servaddr.sin_addr.s_addr = inet_addr("192.168.100.103");
    sleep(3);
ReConnect:        
    printf("-------------------- Data Channel Connection start----------------------\n");
    
    if (connect(sock_cli, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0)
    {
        printf("8001 data channel connect error \n");
        goto ReConnect;

    }
    else
    {
        printf("8001 data channel Connected \n");
    }
    
    setsockopt(sock_cli,SOL_SOCKET,SO_SNDTIMEO,&timeout,sizeof(timeout));
     
    setsockopt(sock_cli,SOL_SOCKET,SO_RCVTIMEO,&timeout,sizeof(timeout));
    
	unsigned char *buf = (unsigned char*)malloc(sizeof(unsigned char)*BUFFER_SIZE);
	
	struct sockaddr_in client_addr;
	socklen_t          length = sizeof(client_addr);

    long lDataRateSum=0;
    int iDataRate;
    int iTestTimes=0;
    
    struct PACKET_STRU{
        enum PACKETTYPE ePacketType;
        unsigned char uFrameNum;
        struct{
            unsigned int uiStartPos;
            unsigned int uiLen;
        } framePos[10]; //maxim 10 frame in one packet
    } curPacketStru, nextPacketStru;

   
        
    unsigned int iFrameLenNextPacket;
    
    unsigned int DataFrameLen,DataFrameLeftLen = 0;
    
    unsigned int iPacketLeftLen =0;
    
    unsigned char uFrameErrorFlag = 0;
    
    unsigned int size = 0;
    
    int ret;
 
    char *s = malloc(100*sizeof(char));
    DATAHEAD *pDataHead = (DATAHEAD *)buf;

    FILE *fp=NULL;
        fp = fopen("./test.ts","w+b");
        if(NULL == fp)
        {
            printf("open file error \n");
            return 0;
        }
    int numwritten;
        int pos=0;
        int len;
        int bStartRecv=0;
        int i;
         
    while(1)
    {



			len = recv(sock_cli, buf, BUFFER_SIZE, 0);
			printf("Get recv packet data length = %d \n",len);
			
			if (len < 0)
			{
				printf("Server Recieve Data Failed!\n");
				close(sock_cli);
				free(buf);
				fclose(fp);
				goto ReSocket;
				
				//break;
			}
			else if(len>0)
			{
				  numwritten = fwrite(buf,sizeof(unsigned char),len,fp);

			}
			if (len ==0)
			{
				printf("Recv data len = 0 \n");
				close(sock_cli);
				free(buf);
				fclose(fp);
				goto ReSocket;
			}

            pos+= len;
            
            if(pos > 3000000)
                break;

            
    }        
    close(sock_cli);
	free(buf);
	fclose(fp);

    return 0;
}






