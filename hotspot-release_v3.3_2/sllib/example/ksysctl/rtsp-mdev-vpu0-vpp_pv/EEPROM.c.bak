#include "stdlib.h"
#include "math.h"
#include "test_gpio_rx_i2c.h"
#include "EEPROM.h"
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/ioctl.h>


/******************24C08 address space***********************/
//deivce	A2 pin	block	r/w		address
//1010 		1 		00 		1/0 	0-255
//1010 		1 		01 		1/0 	256-512
//1010 		1 		10 		1/0 	513-768
//1010 		1	 	11 		1/0 	769-1024
/***********************************************************/

#define R_24C08_BLOCK_1 	0xA9 //1010 1001
#define R_24C08_BLOCK_2 	0xAB //1010 1011
#define R_24C08_BLOCK_3 	0xAD //1010 1101
#define R_24C08_BLOCK_4 	0xAF //1010 1111

#define W_24C08_BLOCK_1 	0xA8 //1010 1000
#define W_24C08_BLOCK_2 	0xAA //1010 1010
#define W_24C08_BLOCK_3 	0xAC //1010 1100
#define W_24C08_BLOCK_4 	0xAE //1010 1110

#define i2c_write_single_byte 	gpio_i2c_write_byte   
#define i2c_read_single_byte	gpio_i2c_read_byte	
#define i2c_start				gpio_i2c_start
#define i2c_stop 				gpio_i2c_end
#define i2c_read_ack 			gpio_i2c_read_ack
#define i2c_send_ack 			gpio_i2c_send_ack
#define i2c_send_nack			gpio_i2c_send_nack


addr_ctrl_byte_struct get_eigenbytes(uint16_t address_in_chip)
{
	addr_ctrl_byte_struct cbs;
	if((address_in_chip<0x00) || (address_in_chip>0x3FF))
	{
		printf("Cross-border error! The range of address_in_chip is 0x000-0x3FF.\n");
		exit(EXIT_FAILURE);
	}
	else
	{
		if((address_in_chip>=0x00) && (address_in_chip<0x100)) //256
		{
			//cbs.ctrl_byte  = 0xA0; //1010 0000
			cbs.ctrl_byte  = 0xA8; //1010 1000
			cbs.word_addr  = address_in_chip;
		}
		else if((address_in_chip>=0x100) && (address_in_chip<0x200)) //512
		{
			//cbs.ctrl_byte  = 0xA2; //1010 0010
			cbs.ctrl_byte  = 0xAA; //1010 1010
			cbs.word_addr  = address_in_chip%0x100;
		}
		else if((address_in_chip>=0x200) && (address_in_chip<0x300)) //768
		{
			//cbs.ctrl_byte  = 0xA4; //1010 0100
			cbs.ctrl_byte  = 0xAC; //1010 1100
			cbs.word_addr  = address_in_chip%0x200;
		}
		else
		{
			//cbs.ctrl_byte  = 0xA6; //1010 0110
			cbs.ctrl_byte  = 0xAE; //1010 1110
			cbs.word_addr  = address_in_chip%0x300; 
		}
	}
	return cbs;
}

// write one byte to e2prom
void i2c_byte_write(uint8_t ctrl_byte,uint8_t word_addr,uint8_t data_byte)
{
	i2c_start();
	i2c_write_single_byte(ctrl_byte);
	if(i2c_read_ack() == 0)
	{
		i2c_write_single_byte(word_addr);
	}
	else 
	{
		printf("read ack error \n");
		return;
	}
	
	if(i2c_read_ack() == 0)
	{
		i2c_write_single_byte(data_byte);
	}
	else
	{
		printf("read ack error \n");
		return;
	}

	if(i2c_read_ack() == 0)
	{
		i2c_stop();
	}
	else
	{
		printf("read ack error \n");
		return;
	}
		
}

// write bytes to e2prom (page write)
void i2c_page_write(uint8_t ctrl_byte,uint8_t word_addr,uint8_t *source_data_addr,uint8_t data_len)
{
	uint8_t i;
	if (data_len<=0)
	{
		printf("i2c_page_write: data_len should be a positive number.\n");
		return;
	}
	else
	{
		i2c_start();
		i2c_write_single_byte(ctrl_byte);
		if(i2c_read_ack() == 0)
			i2c_write_single_byte(word_addr);
		else 
			return;
		for(i=0;i<data_len;i++)
		{
			if(i2c_read_ack() == 0)
				i2c_write_single_byte(*(source_data_addr+i));
			else
				return;
		}
		if(i2c_read_ack() == 0)
			i2c_stop();
		else
			return;
	}
	//printf("i2c_page_write finished.\n");
}

// read current address
uint8_t i2c_current_addr_read(uint8_t ctrl_byte)
{
	uint8_t data;
	i2c_start();
	i2c_write_single_byte(ctrl_byte);
	if(i2c_read_ack() == 0)
	{
		data = i2c_read_single_byte();
		i2c_send_nack();
		i2c_stop();
		return data;
	}
	else 
		return 0;
}

// read one byte from eeprom
uint8_t i2c_rand_read(uint8_t ctrl_byte,uint8_t word_addr)
{
	//printf("ctrl_byte: %x, word_addr: %x \n", ctrl_byte, word_addr);
	uint8_t data;
	i2c_start();
	i2c_write_single_byte(ctrl_byte);
	
	if(i2c_read_ack() == 0)
	{
		i2c_write_single_byte(word_addr);
	}
	else 
	{
		printf("read ack error \n");
		return 0;
	}
		
	
	if(i2c_read_ack() == 0)
	{
		i2c_start();
	}
	else 
	{
		printf("read ack error \n");
		return 0;
	}

	i2c_write_single_byte((ctrl_byte+1));
	
	if(i2c_read_ack() == 0)
	{
		data = i2c_read_single_byte();
		i2c_send_nack();
		i2c_stop();
		return data;
	}
	else
	{
		printf("read ack error \n");
		return 0;
	}
		
}

// read sequential bytes from eeprom 
// it is the ADDRESS that is transferred, but not DATA!
//uint32_t i2c_sequential_read(uint8_t ctrl_byte,uint8_t word_addr,uint16_t data_num)
void i2c_sequential_read(uint8_t ctrl_byte,uint8_t word_addr,uint16_t data_len,uint8_t *data_addr_in_master_mem)
{
	uint16_t i=0;
	
	if(data_len<=0)
	{
		printf("i2c_sequential_read: data_len should be a positive number.\n");
		return;
	}
	else
	{
		i2c_start();
		i2c_write_single_byte(ctrl_byte);
		
		if(i2c_read_ack() == 0)
			i2c_write_single_byte(word_addr);
		else 
			return;
		
		if(i2c_read_ack() == 0)
			i2c_start();
		else 
			return;
		
		i2c_write_single_byte((ctrl_byte+0x01));
		
		if(i2c_read_ack() == 0)
			*data_addr_in_master_mem = i2c_read_single_byte();
		else 
			return;
		
		for(i=1;i<data_len;i++)
		{
			i2c_send_ack();		// master send ACK
			*(data_addr_in_master_mem + i) = i2c_read_single_byte();
		}
		
		i2c_send_nack();		// master send NACK
		i2c_stop();
	}
	printf("i2c_sequential_read finished.\n");
}

// memory_write within one single block
void i2c_write_within_block(uint8_t ctrl_byte,uint8_t word_addr,uint8_t *source_data_addr,uint16_t data_len)
{
	uint8_t page_size = 0x10;
	uint16_t bolck_size = 0x100;
	uint8_t extra_page = 0;
	uint8_t i = 0;
	uint8_t page_offset = word_addr % page_size;
	uint8_t len_left = page_size - page_offset;
	
	// beyond the scope of the current block
	if( (word_addr + data_len) > bolck_size )
	{
		printf("(B1)i2c_write_within_block:beyond the scope of the current block, JUST RETURN.");
		return;
	}
	// within the current block
	else
	{
		if(data_len <= len_left)
		{
			printf("(B2)i2c_write_within_block:within the current page.\n");
			i2c_page_write(ctrl_byte,word_addr,source_data_addr,data_len); // pointer as function parameter?
			while(i2c_ack_check(ctrl_byte));
		}
		else
		{
			printf("(B3)i2c_write_within_block:within the current block but beyond the current page.\n");
			if( (data_len - len_left)%page_size != 0 )
				extra_page = floor( (data_len - len_left)/(float)page_size+1 );
			else
				extra_page = (data_len - len_left)/(float)page_size;
			
			printf("extra_page = %d.\n data_len = %d.\n len_left = %d.\n",extra_page,data_len,len_left);
			// first, write the current page
			i2c_page_write(ctrl_byte,word_addr,source_data_addr,len_left);
			while(i2c_ack_check(ctrl_byte));
			// then, write the following complete page except the last maybe-incomplete page
			for (i=1;i<extra_page;i++)
			{
				i2c_page_write(ctrl_byte,(word_addr+len_left+(i-1)*page_size),(source_data_addr+len_left+(i-1)*page_size),page_size);
				while(i2c_ack_check(ctrl_byte));
			}
			// finally, write the last maybe-incomplete page
			i2c_page_write(ctrl_byte,(word_addr+len_left+(extra_page-1)*page_size),(source_data_addr+len_left+(extra_page-1)*page_size),
			(data_len-len_left-(extra_page-1)*page_size));
			while(i2c_ack_check(ctrl_byte));
		}
	}
	printf("i2c_write_within_block finished.\n");
}


/******************** the following are 2 highest API:Write/Read in chip********************/

// memory_write within one 24c08 Chip
void i2c_write_within_chip(uint16_t address_in_chip,uint8_t *source_data_addr,uint16_t data_len)
{
	uint16_t block_size = 0x100;
	uint8_t extra_block = 0;
	uint8_t i = 0;
	
	addr_ctrl_byte_struct Scb;
	Scb = get_eigenbytes(address_in_chip);
	uint8_t ctrl_byte = Scb.ctrl_byte;
	printf("%x \n", Scb.ctrl_byte);
	uint8_t word_addr = Scb.word_addr;
	printf("%x \n", Scb.word_addr);
	uint8_t left_block_num = 4 - ((ctrl_byte & 0x06) >> 1);
	uint16_t total_mem_left = 1024-256*(4-left_block_num)-word_addr;
	uint16_t current_block_mem_left = block_size-word_addr;
	
	// do not beyond current block
	if ( (word_addr+data_len) <= block_size )
	{
		printf("(C1)i2c_write_within_chip:do not beyond current block.\n");
		i2c_write_within_block(ctrl_byte,word_addr,source_data_addr,data_len);
	}
	// the chip itself is not large enough
	// just write the chip full and abandon the left part
	else if ( data_len > total_mem_left )
	{	
		printf("(C2)i2c_write_within_chip:the chip itself is not large enough.\n");
		data_len = total_mem_left;
		
		if( (data_len-current_block_mem_left)%block_size != 0 )
			extra_block = floor((data_len-current_block_mem_left)/(float)block_size + 1);
		else
			extra_block = (data_len-current_block_mem_left)/(float)block_size;
		
		// first, write the current block
		i2c_write_within_block(ctrl_byte,word_addr,source_data_addr,current_block_mem_left);
		// just write the chip full and abandon the left part
		for (i=1;i <= extra_block;i++)
		{
			i2c_write_within_block(ctrl_byte+0x02*i,0x00,source_data_addr+current_block_mem_left+(i-1)*block_size,block_size);
		}
	}
	// occupy more than one block of memory but not beyond chip's memory range
	else
	{
		printf("(C3)i2c_write_within_chip:occupy more than one block of memory but not beyond chip's memory range.\n");
		
		// judge whether extra_block is intergals or float
		if( (data_len-current_block_mem_left)%block_size != 0 )
			extra_block = floor((data_len-current_block_mem_left)/(float)block_size + 1);
		else
			extra_block = (data_len-current_block_mem_left)/(float)block_size;
		
		printf("extra_block = %d.\n",extra_block);
		// first, write the current block
		i2c_write_within_block(ctrl_byte,word_addr,source_data_addr,current_block_mem_left);
		// then, write the following complete block except the last maybe-incomplete block
		for (i=1;i<extra_block;i++)
		{
			i2c_write_within_block(ctrl_byte+0x02*i,0x00,source_data_addr+current_block_mem_left+(i-1)*block_size,block_size);
		}
		// finally, write the last maybe-incomplete block
		i2c_write_within_block(ctrl_byte+0x02*extra_block,0x00,
			source_data_addr+current_block_mem_left+(extra_block-1)*block_size,
			data_len-current_block_mem_left-(extra_block-1)*block_size);
	}
	printf("i2c_write_within_chip finished.\n");
}

void i2c_read_within_chip(uint16_t address_in_chip,uint8_t *data_addr_in_master_mem,uint16_t data_len)
{
	uint16_t block_size = 0x100;
	uint8_t extra_block = 0;
	uint8_t i = 0;
	
	addr_ctrl_byte_struct Scb;
	Scb = get_eigenbytes(address_in_chip);
	uint8_t ctrl_byte = Scb.ctrl_byte;
	uint8_t word_addr = Scb.word_addr;
	uint8_t left_block_num = 4 - ((ctrl_byte & 0x06) >> 1);
	uint16_t total_mem_left = 1024-256*(4-left_block_num)-word_addr;
	uint16_t current_block_mem_left = block_size-word_addr;
	
	// donot beyond current block
	if ( (word_addr+data_len) <= block_size )
	{
		printf("(C1)i2c_read_within_chip:do not beyond current block.\n");
		i2c_sequential_read(ctrl_byte,word_addr,data_len,data_addr_in_master_mem);
	}
	// the chip itself is not large enough
	// just read the chip full and abandon the left part
	else if (data_len > total_mem_left)
	{
		printf("(C2)i2c_read_within_chip:the chip itself is not large enough.\n");
		data_len = total_mem_left;
		
		if( (data_len-current_block_mem_left)%block_size != 0 )
			extra_block = floor((data_len-current_block_mem_left)/(float)block_size + 1);
		else
			extra_block = (data_len-current_block_mem_left)/(float)block_size;
		
		printf("data_len=%d\n current_block_mem_left=%d\n extra_block=%d\n",data_len,current_block_mem_left,extra_block);
		
		// first, read the current block
		i2c_sequential_read(ctrl_byte,word_addr,current_block_mem_left,data_addr_in_master_mem);
		// then, read the following complete block till the end
		for (i = 1;i <= extra_block;i++)
		{
			i2c_sequential_read(ctrl_byte+0x02*i,0x00,block_size,(data_addr_in_master_mem+current_block_mem_left+(i-1)*block_size));
		}
	}
	// occupy more than one block of memory but not beyond chip's memory range
	else
	{
		printf("(C3)i2c_read_within_chip:occupy more than one block of memory but not beyond chip's memory range.\n");
		
		if( (data_len-current_block_mem_left)%block_size != 0 )
			extra_block = floor((data_len-current_block_mem_left)/(float)block_size + 1);
		else
			extra_block = (data_len-current_block_mem_left)/(float)block_size;
		
		printf("data_len=%d\n current_block_mem_left=%d\n extra_block=%d\n",data_len,current_block_mem_left,extra_block);
		// first, read the current block
		i2c_sequential_read(ctrl_byte,word_addr,current_block_mem_left,data_addr_in_master_mem);
		// then, read the following complete block till the end
		for (i = 1;i < extra_block;i++)
		{
			i2c_sequential_read(ctrl_byte+0x02*i,0x00,block_size,(data_addr_in_master_mem+current_block_mem_left+(i-1)*block_size));
		}
		// finally, write the last maybe-incomplete block
		i2c_sequential_read(ctrl_byte+0x02*extra_block,0x00,data_len-current_block_mem_left-(extra_block-1)*block_size,
		(data_addr_in_master_mem+current_block_mem_left+(extra_block-1)*block_size));
	}
	//printf("i2c_read_within_chip finished.\n");
}
	

#if 1

#define I2C_RETRIES 0x0701
#define I2C_TIMEOUT 0x0702
#define I2C_RDWR 0X0707
#define	I2C_M_WR 0
struct i2c_msg {
	unsigned short addr;	
	unsigned short flags;
#define I2C_M_TEN		0x0010	
#define I2C_M_RD		0x0001	
#define I2C_M_NOSTART		0x4000	
#define I2C_M_REV_DIR_ADDR	0x2000	
#define I2C_M_IGNORE_NAK	0x1000	
#define I2C_M_NO_RD_ACK		0x0800	
#define I2C_M_RECV_LEN		0x0400	
	unsigned short len;		
	unsigned char *buf;		
};

struct i2c_rdwr_ioctl_data {
	struct i2c_msg *msgs;	
	int nmsgs;			
};

struct i2c_rdwr_ioctl_data e2prom_data;
static int fd; //i2c 

int i2c_init(void)
{
	fd = open("/dev/i2c-0",O_RDWR);

	if(fd < 0)
	{
		perror("open /dev/i2c-0 failed\n");
		return -1;
	}
	e2prom_data.nmsgs = 2;
	e2prom_data.msgs = (struct i2c_msg*)malloc(e2prom_data.nmsgs*sizeof(struct i2c_msg));
	if(!e2prom_data.msgs)
	{
		perror("malloc error\n");
		return -1;
	}

	(e2prom_data.msgs[0]).buf = (unsigned char*)malloc(2);
	if(!(e2prom_data.msgs[0]).buf)
	{
		perror("malloc error\n");
		return -1;
	}

	return 0;
}

void i2c_uinit(void)
{

	free(e2prom_data.msgs[0].buf); 
	free(e2prom_data.msgs); 
	close(fd);

}

#if 1
int I2C_WriteByte(unsigned int addr, unsigned char regOffset,unsigned char data)
{
	int ret;
	e2prom_data.nmsgs = 1;
	//IIC write
	(e2prom_data.msgs[0]).len = 0x2;
	(e2prom_data.msgs[0]).addr = addr/2;
	(e2prom_data.msgs[0]).flags = I2C_M_WR;
	(e2prom_data.msgs[0]).buf[0] =regOffset;
	(e2prom_data.msgs[0]).buf[1] =data;

	ret = ioctl(fd,I2C_RDWR,(unsigned long)&e2prom_data);
	if(ret < 0)
	{
		perror("ioctl error2");
		return -1;
	}

	return 0;
}
#endif

#if 1
unsigned char I2C_ReadByte(unsigned int addr, unsigned char regOffset)
{
	//IIC read
	unsigned char  data;
	int ret;
	e2prom_data.nmsgs = 2;
	(e2prom_data.msgs[0]).len = 1;
	(e2prom_data.msgs[0]).addr = addr/2;
	(e2prom_data.msgs[0]).flags = I2C_M_WR;
	(e2prom_data.msgs[0]).buf[0] =regOffset;
	(e2prom_data.msgs[1]).len = 1;
	(e2prom_data.msgs[1]).addr = addr/2;
	(e2prom_data.msgs[1]).flags = I2C_M_RD;
	(e2prom_data.msgs[1]).buf = &data;

	ret = ioctl(fd,I2C_RDWR,(unsigned long)&e2prom_data);
	if(ret < 0)
	{
		perror("ioctl error2");
		return -1;
	}
	//printf("addr : %x \n", addr);
	//printf("leave %s %x\n",__func__,data);
	return data;
}
#endif

#endif

void test(void)
{
    char wbuffer[100] = {'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'};
	char rbuffer[100];
    int i = 0;
    i2c_gpio_init();
	i2c_init();
    while (1)
    {
		//set_I2C_SDA_LOW();
		usleep(500000);
		//set_I2C_SDA_HIG();
		#if 1
		I2C_WriteByte(0xAE, 0x00, 0x33);
		printf("%x\n", I2C_ReadByte(0xAE, 0x00));
		#endif

#if 0
		i2c_byte_write(0xAA, 0x00, 'B');



		gpio_i2c_start(); //start
		gpio_i2c_write_byte(W_24C08_BLOCK_2); //
		gpio_i2c_read_ack();
		gpio_i2c_write_byte(0x00);
		gpio_i2c_read_ack();

		gpio_i2c_start();
		gpio_i2c_write_byte(W_24C08_BLOCK_2+1); //device address
		gpio_i2c_read_ack();
		for (i=254; i>=0; i--)
		{
			printf("%c", gpio_i2c_read_byte());
			gpio_i2c_send_ack();
			if (i%10 == 0)
			{
				printf("\n");
			}
		}
		printf("%x ", gpio_i2c_read_byte());
		gpio_i2c_send_nack();
		gpio_i2c_end();
		#if 0
		printf("------%c---------\n", i2c_rand_read(0xA8, 0x00));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x01));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x02));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x03));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x04));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x05));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x06));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x07));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x08));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x09));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x0a));
		printf("------%x---------\n", i2c_rand_read(0xA8, 0x0b));
		//printf("------%x---------\n", i2c_rand_read(0xA8, 0x04));
		//i2c_write_within_chip(0x00, &wbuffer, sizeof(wbuffer));
		//i2c_read_within_chip(0x00, &rbuffer, sizeof(rbuffer));
		//printf("===========%s =========\n", rbuffer);
		#endif
#endif

#if 1
		gpio_i2c_start();

		gpio_i2c_write_byte(0xAE); //device address
		if (1 == gpio_i2c_read_ack())
		{
			printf("i2c write ack error \n");
		}

		gpio_i2c_write_byte(0x00); //offset address
		if (1 == gpio_i2c_read_ack())
		{
			printf("i2c write ack error \n");
		}
		//gpio_i2c_start();
		#if 0
		for (i=15; i>=0; i--)
		{
			gpio_i2c_write_byte(0xAA);	//value
			if (1 == gpio_i2c_read_ack())
			{
				printf("i2c write ack error \n");
			}
		}
		#endif
		gpio_i2c_write_byte(0xAA);	//value
		if (1 == gpio_i2c_read_ack())
		{
			printf("i2c write ack error \n");
		}

		gpio_i2c_end();
		usleep(1000);

		gpio_i2c_start(); //start
		gpio_i2c_write_byte(0xAE); //
		gpio_i2c_read_ack();
		gpio_i2c_write_byte(0x00);
		gpio_i2c_read_ack();

		gpio_i2c_start();
		gpio_i2c_write_byte(0xAF); //device address
		gpio_i2c_read_ack();

		#if 0
		for (i=254; i>=0; i--)
		{
			printf("%x ", gpio_i2c_read_byte());
			gpio_i2c_send_ack();
			if (i%10 == 0)
			{
				printf("\n");
			}
		}
		#endif
		printf("%x \n", gpio_i2c_read_byte());
		gpio_i2c_send_nack();
		gpio_i2c_end();
#endif
		usleep(500000);
    }
    
}




